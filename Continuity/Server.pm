
#package Coro::HTTP::Daemon;
#use HTTP::Daemon;
#use base 'Coro::Socket', 'HTTP::Daemon::ClientConn';

package Continuity::Server;

use strict;
use Coro::Cont;

use lib '.';

sub new {
  my $self = {@_};
  bless $self;

  if($self->{newContinuationSub}) {
    my $mkNewCont = sub { mkcont(
      $self->{newContinuationSub}) };
    $self->{mkNewCont} = $mkNewCont;
  }
  return $self;
}

# Take a sub ref and give back a continuation. Just a shortcut
sub mkcont {
  my ($func) = @_;
  my $cont = csub { $func->(@_) };
  return $cont;
}

# Sessions are currently generated by starting with zero and going up from
# there... not a very good way!
my $sessionIdCounter;
sub getSession {
  my ($self, $request) = @_;
  #print "Headers: " . $request->as_string();

  my $cookieHeader = $request->header('Cookie');
  print "Cookie: $cookieHeader\n";
  
  print "sessionIdCounter: $sessionIdCounter\n";
  if($cookieHeader =~ /sessionid=(\d+)/) {
    print "Found sessionId!\n";
    return $1;
  }
  return $sessionIdCounter++;
}

=item mapPath($path) - map a URL path to a filesystem path

=cut

sub mapPath {
  my ($self, $path) = @_;
  my $docroot = $self->{docroot};
   # some massaging, also makes it more secure
   $path =~ s/%([0-9a-fA-F][0-9a-fA-F])/chr hex $1/ge;
   $path =~ s%//+%/%g;
   $path =~ s%/\.(?=/|$)%%g;
   1 while $path =~ s%/[^/]+/\.\.(?=/|$)%%;

   # if($path =~ m%^/?\.\.(?=/|$)%) then bad

  return "$docroot$path";
}


=item sendStatic($c, $path) - send static file to the $c filehandle

We cheat here... use 'magic' to get mimetype and send that. then the binary
file

=cut

sub sendStatic {
  my ($self, $r, $c) = @_;
  my $path = $self->mapPath($r->url->path);
  my $file;
  if(-f $path) {
    local $\;
    open($file, $path);
    select $c;
    # For now we'll cheat (badly) and use file
    my $mimetype = `file -bi $path`;
    chomp $mimetype;
    # And for now we'll make a raw exception for .html
    $mimetype = 'text/html' if $path =~ /\.html$/;
    print "Content-type: $mimetype\r\n\r\n";
    print <$file>;
    select STDOUT;
    print "Static send '$path', Content-type: $mimetype\n";
  } else {
    $c->send_error(404)
  }
}


=item serve() - main serving loop

=cut


sub map {
  my ($self, $request) = @_;
  my $c;
  my $sessionId = getSession($request);
  if(defined $self->{continuations}{$sessionId}) {
    $c = $self->{continuations}{$sessionId};
  } else {
    $c = $self->{mkNewCont}->($request);
    $self->{continuations}{$sessionId} = $c;
  }
  return $c;
}

sub mainLoop {

  my ($self, $appName) = @_;

  # Don't pull these in unless we were called
  eval {
    use HTTP::Daemon;
    use HTTP::Status;
  };

  my %httpConfig = (
    LocalPort => 8081,
    ReuseAddr => 1,
  );

  $self->{docroot} = './docs';

  my $d = HTTP::Daemon->new(%httpConfig) || die;
  print "Please contact me at: ", $d->url, "\n";

  async {
    #while (my $c = $d->accept('Coro::HTTP::Daemon')) {
    while (my $c = $d->accept()) {
      #while (my $r = $c->get_request) { # Doesn't work
      if(my $r = $c->get_request) {
        if($r->method eq 'GET' || $r->method eq 'POST') {

          # Send the basic headers all the time
          $c->send_basic_header();

          # And send our session cookie
          my $sessionId = $self->getSession($r);
          print $c "Set-Cookie: sessionid=$sessionId\r\n";

          # We need some way to decide if we should send static or dynamic
          # content. Lets say that if the requested path ends in .pl then they
          # should send dynamic, otherwise static.
          if($r->url->path eq $appName) {
            print "Calling map... ";
            my $continuation = $self->map($r);
            print " done.\n";
            $continuation->($r);
          } else {
            $self->sendStatic($r, $c);
          }
        } else {
          $c->send_error(RC_NOT_FOUND)
        }
      }
      $c->close;
      undef($c);
    }
  }
}

1;

